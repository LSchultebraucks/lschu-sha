import {preprocess, rightRotate, rightShiftWithLeadingZeros} from '../src/utils';

test('preprocess - single chunk length word', () => {
    const message = 'hello world';
    const expectedPreprocessedMessage = '01101000011001010110110001101100011011110010000001110111011011110111001001101100011001001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001011000';
    expect(preprocess(message)).toEqual(expectedPreprocessedMessage);
});

test('preprocess - multiple chunk length word', () => {
    const message = 'Let\'s hash something! Long enough to have multiple chunks...';
    const expectedPreprocessedMessage
    expect(preprocess(message)).toEqual(expectedPreprocessedMessage);
});

test('rightRotate - singleRotate', () => {
    const word = '10010010';
    const expectedWord = '01001001';
    expect(rightRotate(word, 1)).toEqual(expectedWord);
});

test('rightRotate - multipleRotate', () => {
    const word = '10010010';
    const expectedWord = '01010010';
    expect(rightRotate(word, 3)).toEqual(expectedWord);
});

test('rightRotate - fullRotate', () => {
    const word = '10010010';
    const expectedWord = '10010010';
    expect(rightRotate(word, 8)).toEqual(expectedWord);
});

test('rightShift - singleShift', () => {
    const word = '10010010';
    const expectedWord = '01001001';
    expect(rightShiftWithLeadingZeros(word, 1)).toEqual(expectedWord);
});

test('rightShift - multipleShift', () => {
    const word = '10010010';
    const expectedWord = '00010010'; 
    expect(rightShiftWithLeadingZeros(word, 3)).toEqual(expectedWord);
});

test('rightShift - fullShift', () => {
    const word = '10010010';
    const expectedWord = '00000000';
    expect(rightShiftWithLeadingZeros(word, 8)).toEqual(expectedWord);
});
