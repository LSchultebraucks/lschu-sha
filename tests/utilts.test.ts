import {to8BitString, appendSingle1, padWithZerosToDiv512, preprocess} from "../src/utils";

test('to8BitString - empty string expect empty array', () => {
    expect(to8BitString('')).toEqual('');
});

test('to8BitString - hello world', () => {
    const word = 'hello world';
    const expectedBinaryString = '0110100001100101011011000110110001101111001000000111011101101111011100100110110001100100';
    expect(to8BitString(word)).toEqual(expectedBinaryString);
});

test('appendSingle1', () => {
    const word = '0110100001100101011011000110110001101111001000000111011101101111011100100110110001100100';
    const wordWithSingle1 = '01101000011001010110110001101100011011110010000001110111011011110111001001101100011001001';
    expect(appendSingle1(word)).toEqual(wordWithSingle1);
})

test('padWithZerosToDiv512 - empty word', () => {
    const word = '';
    const expectedWord = '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000';
    expect(padWithZerosToDiv512(word)).toEqual(expectedWord);
})

test('padWithZerosToDiv512 - word length less than 512 in binary', () => {
    const word = '01101000011001010110110001101100011011110010000001110111011011110111001001101100011001001';
    const expectedWord = '01101000011001010110110001101100011011110010000001110111011011110111001001101100011001001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000';
    expect(padWithZerosToDiv512(word)).toEqual(expectedWord);
});

test('preprocess - single chunk length word', () => {
    const message = 'hello world';
    const expectedPreprocessedMessage = '01101000011001010110110001101100011011110010000001110111011011110111001001101100011001001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001011000';
    expect(preprocess(message)).toEqual(expectedPreprocessedMessage);
})

test('preprocess - multiple chunk length word', () => {
    const message = 'Let\'s hash something! Long enough to have multiple chunks...';
    const expectedPreprocessedMessage
    expect(preprocess(message)).toEqual(expectedPreprocessedMessage);
})